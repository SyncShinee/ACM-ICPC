#include <cstring>
#include <algorithm>
#include <cstdio>
using namespace std;

const int N = 2e5 + 7;

int sa[N];

int t1[N], t2[N], cnt[N];

int rankk[N], height[N];

void build_sa(char s[], int n, int m) {
    int i, j, p, *x = t1, *y = t2;
    for (i = 0; i < m; ++ i) cnt[i] = 0;
    for (i = 0; i < n; ++ i) cnt[x[i] = s[i]]++;
    for (i = 1; i < m; ++ i) cnt[i] += cnt[i - 1];
    for (i = n - 1; i >= 0; -- i) sa[--cnt[x[i]]] = i;
    for (j = 1; j <= n; j <<= 1) {
	p = 0;
	for (i = n - j; i < n; ++ i) y[p++] = i;
	for (i = 0; i < n; ++ i) if (sa[i] >= j) y[p++] = sa[i] - j;
	for (i = 0; i < m; ++ i) cnt[i] = 0;
	for (i = 0; i < n; ++ i) cnt[x[y[i]]]++;
	for (i = 1; i < m; ++ i) cnt[i] += cnt[i - 1];
	for (i = n - 1; i >= 0; -- i) sa[--cnt[x[y[i]]]] = y[i];
	swap(x, y);
	p = 1;
	x[sa[0]] = 0;
	for (i = 1; i < n; ++ i) {
	    x[sa[i]] = y[sa[i - 1]] == y[sa[i]] && y[sa[i - 1] + j] == y[sa[i] + j] ? p - 1 : p ++;
	}
	if (p >= n) break;
	m = p;
    }
}

void get_height(char s[], int n) {
    int i, j, k = 0;
    for (i = 0; i <= n; ++ i) rankk[sa[i]] = i;
    for (i = 0; i < n; ++ i) {
	if (k) k--;
	j = sa[rankk[i] - 1];
	while (s[i + k] == s[j + k]) k++;
	height[rankk[i]] = k;
    }
}

char s[N];

int sgn(int x) {
    if (x < 0) return -1;
    if (x == 0) return 0;
    return 1;
}

int main() {
    int n;
    scanf("%s", s);
    int len = strlen(s);
    s[len] = '$';
    scanf("%s", s + len + 1);
    n = strlen(s);
    build_sa(s, n, 256);
    get_height(s, n);
    int ans = 0;
    for (int i = 1; i < n; ++ i) {
	if (sgn(sa[i] - len) * sgn(sa[i - 1] - len) < 0) {
	    if (height[i] > ans) {
		ans = height[i];
	    }
	}
    }
    printf("%d\n", ans);
    return 0;
}
